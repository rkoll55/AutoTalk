[{"/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/index.tsx":"1","/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/reportWebVitals.ts":"2","/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/App.tsx":"3","/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/components/Login.tsx":"4","/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/components/UserDashboard.tsx":"5"},{"size":554,"mtime":1693020874906,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1692962446430,"results":"8","hashOfConfig":"7"},{"size":942,"mtime":1693106242570,"results":"9","hashOfConfig":"7"},{"size":2295,"mtime":1693017860616,"results":"10","hashOfConfig":"7"},{"size":7815,"mtime":1693106249362,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"4mhrkz",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/index.tsx",[],[],[],"/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/reportWebVitals.ts",[],[],"/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/App.tsx",["30"],[],"import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/Login';\nimport UserDashboard from './components/UserDashboard';\n\n// const mockUserData = {\n//   username: 'JohnDoe',\n//   email: 'johndoe@example.com',\n//   memberSince: new Date('2021-01-01')\n// }\n\nconst App: React.FC = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [currentUser, setCurrentUser] = useState<string | null>(null);\n\n  const handleLoginSuccess = (username: string) => {\n      setIsLoggedIn(true);\n      setCurrentUser(username);\n  };\n\n  if (isLoggedIn && currentUser) {\n      // return <h1>Welcome, {currentUser}!</h1>;\n      return <UserDashboard userName={currentUser} setIsLoggedIn={setIsLoggedIn}/>\n  }\n\n    // return <UserDashboard userData={mockUserData} setIsLoggedIn={setIsLoggedIn}/>\n  return <Login onLoginSuccess={handleLoginSuccess} />;\n}\n\nexport default App;\n","/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/components/Login.tsx",[],[],"/home/astra/Documents/Programming/hackathon2023/AutoTalk/Frontend/autotalk/src/components/UserDashboard.tsx",["31","32","33","34","35","36","37","38","39","40","41","42"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport '../assets/UserDashboard.css'; // Assuming you have this CSS file created\nimport logo from '../assets/logo_dark.png'; // Adjust the path accordingly\nimport {FaUserAstronaut, FaCogs, FaSignOutAlt, FaHandSparkles, FaMedal, FaSignLanguage, FaThumbsUp} from 'react-icons/fa'\nimport axios from 'axios'; \n\ntype UserDashboardProps = {\n  userName: string; // Change the type to string\n  setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\n  \n};\n\nconst UserDashboard: React.FC<UserDashboardProps> = ({ userName, setIsLoggedIn }) => {\n    const videoRef = useRef<HTMLVideoElement | null>(null);\n    const [showMain, setShowMain] = useState(true);\n    const [shrink, setShrink] = useState(false);\n    const [countdown, setCountdown] = useState<number>(3);\n    const [splitPhrases, setSplitPhrases] = useState<JSX.Element[]>([]);\n    const [promptText, setPromptText] = useState<string>('');\n    const [activePhraseIndex, setActivePhraseIndex] = useState<number>(-1); // Initialize to -1\n\n    useEffect(() => {\n        if (!showMain && countdown > 0) {\n            const timer = setTimeout(() => {\n                setCountdown(prevCount => prevCount - 1);\n            }, 1000);\n    \n            return () => {\n                clearTimeout(timer);\n            };\n        }\n    }, [showMain, countdown]);\n\n      // Simulate API response\n  const dummyApiResponse = {\n    promptText: \"Why ! are you ! here?\"\n  };\n\n  useEffect(() => {\n    // Simulate API call\n    // Replace this with your actual API call if needed\n    const simulateApiCall = () => {\n      return new Promise<{ promptText: string }>((resolve) => {\n        setTimeout(() => {\n          resolve(dummyApiResponse);\n        }, 1000);\n      });\n    };\n\n    simulateApiCall()\n    .then((response) => {\n        const promptText = response.promptText;\n        const phrases = promptText.split('!').map((phrase: string, index: number) => (\n          <span\n            key={index}\n            className={index <= activePhraseIndex ? 'active-text' : 'inactive-text'}\n            onClick={() => handlePhraseClick(index)}\n          >\n            {phrase.trim()}\n            {index !== promptText.split('!').length - 1 && ' '} {/* Add space except for the last phrase */}\n          </span>\n        ));\n        setSplitPhrases(phrases);\n      })\n      .catch((error) => {\n        console.error('Error fetching prompt text:', error);\n      });\n  }, [activePhraseIndex]);\n    \n\n    useEffect(() => {\n        document.body.classList.add('dashboard-page');\n\n        // Start the video stream when the component is mounted\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia({ video: true })\n                .then((stream) => {\n                    if (videoRef.current) {\n                        videoRef.current.srcObject = stream;\n                    }\n                })\n                .catch((err) => {\n                    console.log(\"An error occurred: \" + err);\n                });\n        }\n\n        // Stop the video stream when the component is unmounted\n        return () => {\n            document.body.classList.remove('dashboard-page');\n            if (videoRef.current && videoRef.current.srcObject) {\n                let tracks = (videoRef.current.srcObject as MediaStream).getTracks();\n                tracks.forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    const handleLogout = () => {\n      // Here you can add other logout related functionality if needed\n      setIsLoggedIn(false);\n    };\n\n\n    const handlePhraseClick = (index: number) => {\n        setActivePhraseIndex(index);\n        const updatedPhrases = splitPhrases.map((phrase, i) => (\n        <span\n            key={i}\n            className={i <= index ? 'green-text' : 'grey-text'}\n            onClick={() => handlePhraseClick(i)}\n        >\n            {phrase.props.children}\n        </span>\n        ));\n        setSplitPhrases(updatedPhrases);\n    };\n\n    const handleStart = () => {\n        setShrink(true);\n        \n        // After the shrink completes, re-expand and then toggle the main content\n        setTimeout(() => {\n            setShrink(false);\n            setShowMain(!showMain);\n        }, 500); // This should match the transition time you set in the CSS (0.5s = 500ms)\n    };\n    const handleGameStartClick = () => {\n        setActivePhraseIndex(prevIndex => prevIndex + 1);\n    };\n    const isEntirePromptActive = activePhraseIndex === splitPhrases.length - 1;\n\n    \n\n    return (\n        <div className=\"wrapper\">\n            <nav className=\"vertical-nav\">\n                <div className=\"header-logo\">\n                    <img src={logo} alt=\"Logo\" />\n                </div>\n                <ul>\n                    <li><a href='#'><FaHandSparkles className='nav-icons'/></a></li>\n                    <li><a href='#'><FaMedal className='nav-icons'/></a></li>\n                    <li><a href='#'><FaUserAstronaut className='nav-icons'/></a></li>\n                    <li><a href='#'><FaCogs className='nav-icons'/></a></li>\n                    <li><a href='#'><FaSignOutAlt onClick={handleLogout} className='nav-icons'/></a></li>\n                </ul>\n            </nav>\n            <div className='dashboard'>\n                {showMain && (\n                <main className={`main-content ${shrink ? 'shrink' : ''}`}>\n                    <FaUserAstronaut className='profile-icon'/>\n                    <h2>Welcome, {userName}</h2>\n                    <p>\"Welcome to SignQuest â€“ the ultimate fusion of learning and play! Immerse yourself in a world where sign language comes alive as a game. Once you press start, you will receive prompts, express them through sign language to the camera. Get ready to embark on an exciting journey of communication and skill with SignQuest!\"</p>\n                    <button className=\"start-button\" onClick={handleStart}>\n                      <FaHandSparkles/>\n                      <span>Start</span>\n                    </button>\n                </main>\n                )}\n                {!showMain && countdown>0 && (\n                    <main className=\"main-countdown\">\n                        {countdown > 0 && <h2 className=\"countdown-timer\">{countdown}</h2>}\n                    </main>\n                )}\n                {!showMain && countdown==0 && (\n                    <main className=\"main-game\">\n                        <h2 onClick={handleGameStartClick} className='game-start'>Game starts now!</h2>\n                        {/* <p className='prompt'>{promptText}</p> */}\n                        <p className=\"prompt\">\n                            {splitPhrases.map((phrase, index) => (\n                                <span\n                                    key={index}\n                                    className=\"grey-text\"\n                                    onClick={() => handlePhraseClick(index)}\n                                >\n                                    {phrase}\n                                </span>\n                            ))}\n                        </p>\n                        {isEntirePromptActive && (\n                            <div className='finished-line'>\n                                <FaThumbsUp className='icon-done'/>\n                                <p className='prompt-done'>Congratulations</p>\n                            </div>\n                        )}\n                    </main>\n                )}\n                <div className=\"main-header\">\n                    {/* Video Element to display the camera feed */}\n                    <video ref={videoRef} autoPlay={true} className='main-camera'></video>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default UserDashboard;\n",{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":12},{"ruleId":"43","severity":1,"message":"47","line":4,"column":73,"nodeType":"45","messageId":"46","endLine":4,"endColumn":87},{"ruleId":"43","severity":1,"message":"48","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":13},{"ruleId":"43","severity":1,"message":"49","line":19,"column":12,"nodeType":"45","messageId":"46","endLine":19,"endColumn":22},{"ruleId":"43","severity":1,"message":"50","line":19,"column":24,"nodeType":"45","messageId":"46","endLine":19,"endColumn":37},{"ruleId":"51","severity":1,"message":"52","line":68,"column":6,"nodeType":"53","endLine":68,"endColumn":25,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":91,"column":40,"nodeType":"45","endLine":91,"endColumn":47},{"ruleId":"56","severity":1,"message":"57","line":140,"column":25,"nodeType":"58","endLine":140,"endColumn":37},{"ruleId":"56","severity":1,"message":"57","line":141,"column":25,"nodeType":"58","endLine":141,"endColumn":37},{"ruleId":"56","severity":1,"message":"57","line":142,"column":25,"nodeType":"58","endLine":142,"endColumn":37},{"ruleId":"56","severity":1,"message":"57","line":143,"column":25,"nodeType":"58","endLine":143,"endColumn":37},{"ruleId":"56","severity":1,"message":"57","line":144,"column":25,"nodeType":"58","endLine":144,"endColumn":37},{"ruleId":"59","severity":1,"message":"60","line":164,"column":40,"nodeType":"61","messageId":"62","endLine":164,"endColumn":42},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'FaSignLanguage' is defined but never used.","'axios' is defined but never used.","'promptText' is assigned a value but never used.","'setPromptText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dummyApiResponse' and 'handlePhraseClick'. Either include them or remove the dependency array.","ArrayExpression",["63"],"The ref value 'videoRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoRef.current' to a variable inside the effect, and use that variable in the cleanup function.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"64","fix":"65"},"Update the dependencies array to be: [activePhraseIndex, dummyApiResponse, handlePhraseClick]",{"range":"66","text":"67"},[2461,2480],"[activePhraseIndex, dummyApiResponse, handlePhraseClick]"]